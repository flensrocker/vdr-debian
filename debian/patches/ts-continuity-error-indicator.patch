#! /bin/sh /usr/share/dpatch/dpatch-run
##
## DP: Addes an error indicator to the recording info, which counts
## DP: the number of discontinuity errors

@DPATCH@
Index: vdr/recorder.c
===================================================================
--- vdr.orig/recorder.c	2012-03-13 23:19:17.000000000 +0100
+++ vdr/recorder.c	2012-03-13 23:19:27.000000000 +0100
@@ -121,6 +121,7 @@
   time_t t = time(NULL);
   bool InfoWritten = false;
   bool FirstIframeSeen = false;
+  cTsStreamErrorCounter TsStreamErrorCounter;
   while (Running()) {
         int r;
         uchar *b = ringBuffer->Get(r);
@@ -156,6 +157,16 @@
                              fileSize += TS_SIZE;
                              }
                        }
+                    TsStreamErrorCounter.CheckTsPackets(b, Count);
+                    if (InfoWritten && TsStreamErrorCounter.ErrorCount() > 0) {
+                       cRecordingInfo RecordingInfo(recordingName);
+                       if (RecordingInfo.Read()) {
+                          RecordingInfo.SetErrorCount(RecordingInfo.ErrorCount() + TsStreamErrorCounter.ErrorCount());
+                          RecordingInfo.Write();
+                          Recordings.UpdateByName(recordingName);
+                          TsStreamErrorCounter.ResetErrorCount();
+                          }
+                       }
                     if (recordFile->Write(b, Count) < 0) {
                        LOG_ERROR_STR(fileName->Name());
                        break;
Index: vdr/recording.c
===================================================================
--- vdr.orig/recording.c	2012-03-13 23:19:11.000000000 +0100
+++ vdr/recording.c	2012-03-13 23:19:27.000000000 +0100
@@ -321,6 +321,7 @@
   event = ownEvent ? ownEvent : Event;
   aux = NULL;
   framesPerSecond = DEFAULTFRAMESPERSECOND;
+  errorCount = 0;
   priority = MAXPRIORITY;
   lifetime = MAXLIFETIME;
   fileName = NULL;
@@ -414,6 +415,11 @@
   framesPerSecond = FramesPerSecond;
 }
 
+void cRecordingInfo::SetErrorCount(int ErrorCount)
+{
+  errorCount = ErrorCount;
+}
+
 bool cRecordingInfo::Read(FILE *f)
 {
   if (ownEvent) {
@@ -453,6 +459,8 @@
                        break;
              case 'F': framesPerSecond = atof(t);
                        break;
+             case 'R': errorCount = atoi(t);
+                       break;
              case 'L': lifetime = atoi(t);
                        break;
              case 'P': priority = atoi(t);
@@ -479,6 +487,7 @@
      fprintf(f, "%sC %s%s%s\n", Prefix, *channelID.ToString(), channelName ? " " : "", channelName ? channelName : "");
   event->Dump(f, Prefix, true);
   fprintf(f, "%sF %.10g\n", Prefix, framesPerSecond);
+  fprintf(f, "%sR %d\n", Prefix, errorCount);
   fprintf(f, "%sP %d\n", Prefix, priority);
   fprintf(f, "%sL %d\n", Prefix, lifetime);
   if (aux)
Index: vdr/recording.h
===================================================================
--- vdr.orig/recording.h	2012-03-13 23:19:11.000000000 +0100
+++ vdr/recording.h	2012-03-13 23:19:27.000000000 +0100
@@ -56,6 +56,7 @@
   cEvent *ownEvent;
   char *aux;
   double framesPerSecond;
+  int errorCount;
   int priority;
   int lifetime;
   char *fileName;
@@ -76,6 +77,8 @@
   const char *Aux(void) const { return aux; }
   double FramesPerSecond(void) const { return framesPerSecond; }
   void SetFramesPerSecond(double FramesPerSecond);
+  int ErrorCount(void) const { return errorCount; }
+  void SetErrorCount(int ErrorCount);
   bool Write(FILE *f, const char *Prefix = "") const;
   bool Read(void);
   bool Write(void) const;
Index: vdr/remux.c
===================================================================
--- vdr.orig/remux.c	2012-03-13 23:18:15.000000000 +0100
+++ vdr/remux.c	2012-03-13 23:19:27.000000000 +0100
@@ -1033,3 +1033,44 @@
         }
   return Processed;
 }
+
+// --- cTsStreamErrorCounter -------------------------------------------------
+
+cTsStreamErrorCounter::cTsStreamErrorCounter(void)
+{
+  errorCount = 0;
+  for(int i=0; i < MAX_PIDS; i++) pids[i] = -1;
+  memset(counters, 0, sizeof(counters));
+}
+
+void cTsStreamErrorCounter::CheckTsPackets(uchar* Data, int Length)
+{
+  while (Length >= TS_SIZE) {
+        int pid = ((Data[1] & 0x1F) << 8) + Data[2];
+        char ctr = (Data[3] & 0x0F);
+        char adaption = (Data[3] & 0x30) >> 4;
+
+        if (adaption != 2)
+           CheckTsPacketContinuity(pid, ctr);
+
+        Length -= TS_SIZE;
+        Data += TS_SIZE;
+       }
+}
+
+void cTsStreamErrorCounter::CheckTsPacketContinuity(int pid, int counter)
+{
+  for (int i=0; i < MAX_PIDS; i++) {
+      if (pids[i] == -1) {
+         pids[i] = pid;
+         counters[i] = counter;
+         break;
+         }
+      if (pids[i] == pid) {
+         if (((counter - counters[i]) & 0x0F) != 1)
+            errorCount++;
+         counters[i] = counter;
+         break;
+         }
+      }
+}
Index: vdr/remux.h
===================================================================
--- vdr.orig/remux.h	2012-03-13 23:18:15.000000000 +0100
+++ vdr/remux.h	2012-03-13 23:19:27.000000000 +0100
@@ -390,4 +390,29 @@
       ///< available.
   };
 
+
+// TS stream error counter:
+// Count (continuity) errors in a TS packet stream
+
+#define MAX_PIDS 20
+
+class cTsStreamErrorCounter {
+private:
+  int errorCount;
+  int pids[MAX_PIDS];
+  uchar counters[MAX_PIDS];
+public:
+  cTsStreamErrorCounter(void);
+  void CheckTsPackets(uchar* Data, int Length);
+      ///< Check for errors in the TS packets pointed to by Data. Length is the
+      ///< number of bytes Data points to, and must be a multiple of 188.
+  int ErrorCount(void) const { return errorCount; };
+      ///< Return the number of errors found in the analyzed TS packet stream.
+      ///< Right now, only continuity errors are reported.
+  void ResetErrorCount(void) { errorCount = 0; };
+      ///< Reset error count to 0
+private:
+  void CheckTsPacketContinuity(int pid, int counter);
+  };
+
 #endif // __REMUX_H
