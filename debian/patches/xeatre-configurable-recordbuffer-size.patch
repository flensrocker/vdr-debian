#! /bin/sh /usr/share/dpatch/dpatch-run
##
## DP: This allows to configure the recorde buffer size and increases the
## DP: default buffer size from 5 MB to 100 MB.
## DP:
## DP: When encountering buffer overflows, the recordbuffer size should be
## DP: increased.

@DPATCH@
Index: vdr/config.c
===================================================================
--- vdr.orig/config.c	2012-03-13 23:18:15.000000000 +0100
+++ vdr/config.c	2012-03-13 23:19:17.000000000 +0100
@@ -462,6 +462,7 @@
   InitialVolume = -1;
   ChannelsWrap = 0;
   EmergencyExit = 1;
+  RecorderBufSize = 100;
 }
 
 cSetup& cSetup::operator= (const cSetup &s)
@@ -656,6 +657,7 @@
   else if (!strcasecmp(Name, "DeviceBondings"))      DeviceBondings     = Value;
   else if (!strcasecmp(Name, "ChannelsWrap"))        ChannelsWrap       = atoi(Value);
   else if (!strcasecmp(Name, "EmergencyExit"))       EmergencyExit      = atoi(Value);
+  else if (!strcasecmp(Name, "RecorderBufSize"))     RecorderBufSize    = atoi(Value);
   else
      return false;
   return true;
@@ -753,6 +755,7 @@
   Store("DeviceBondings",     DeviceBondings);
   Store("ChannelsWrap",       ChannelsWrap);
   Store("EmergencyExit",      EmergencyExit);
+  Store("RecorderBufSize",    RecorderBufSize);
 
   Sort();
 
Index: vdr/config.h
===================================================================
--- vdr.orig/config.h	2012-03-13 23:18:15.000000000 +0100
+++ vdr/config.h	2012-03-13 23:19:17.000000000 +0100
@@ -313,6 +313,7 @@
   int InitialVolume;
   int ChannelsWrap;
   int EmergencyExit;
+  int RecorderBufSize;
   int __EndData__;
   cString InitialChannel;
   cString DeviceBondings;
Index: vdr/recorder.c
===================================================================
--- vdr.orig/recorder.c	2012-03-13 23:18:15.000000000 +0100
+++ vdr/recorder.c	2012-03-13 23:19:17.000000000 +0100
@@ -10,7 +10,7 @@
 #include "recorder.h"
 #include "shutdown.h"
 
-#define RECORDERBUFSIZE  (MEGABYTE(5) / TS_SIZE * TS_SIZE) // multiple of TS_SIZE
+#define RECORDERBUFSIZE  (MEGABYTE(Setup.RecorderBufSize) / TS_SIZE * TS_SIZE) // multiple of TS_SIZE
 
 // The maximum time we wait before assuming that a recorded video data stream
 // is broken:
@@ -32,6 +32,8 @@
   SpinUpDisk(FileName);
 
   ringBuffer = new cRingBufferLinear(RECORDERBUFSIZE, MIN_TS_PACKETS_FOR_FRAME_DETECTOR * TS_SIZE, true, "Recorder");
+  dsyslog("RECORDERBUFSIZE: %d\n", RECORDERBUFSIZE);
+
   ringBuffer->SetTimeouts(0, 100);
 
   int Pid = Channel->Vpid();
